RegEx	TokenName	TokenValue
array	TOKEN_ARRAY	258
boolean	TOKEN_BOOLEAN	259
char	TOKEN_CHAR	260
else	TOKEN_ELSE	261
false	TOKEN_FALSE	262
for	TOKEN_FOR	263
function	TOKEN_FUNCTION	264
if	TOKEN_IF	265
integer	TOKEN_INTEGER	266
print	TOKEN_PRINT	267
return	TOKEN_RETURN	268
string	TOKEN_STRING	269
true	TOKEN_TRUE	270
void	TOKEN_VOID	271
while	TOKEN_WHILE	272
[0-9]+	TOKEN_LITERAL_INT	273
\'(.|\\.)\'	TOKEN_LITERAL_CHAR	274
"\""(\\.|[^""\\])*\"""	TOKEN_LITERAL_STRING	275
([A-Za-z]|_)([A-Za-z]|_|[0-9])*	TOKEN_IDENT	276
\+\+	TOKEN_POSTFIX_ADD	277
\-\-	TOKEN_POSTFIX_MINUS	278
\>=	TOKEN_GREATER_EQUAL	279
\<=	TOKEN_LESS_EQUAL	280
\=\=	TOKEN_EQUAL	281
\!\=	TOKEN_NOT_EQUAL	282
\&\&	TOKEN_LOGICAL_AND	284
\|\|	TOKEN_LOGICAL_OR	285
\!	TOKEN_NOT	283
\(	TOKEN_LPAREN	286
\)	TOKEN_RPAREN	287
\[	TOKEN_LBRACKET	288
\]	TOKEN_RBRACKET	289
\{	TOKEN_LBRACE	290
\}	TOKEN_RBRACE	291
\^	TOKEN_EXPONENTIATION	292
\*	TOKEN_MUL	293
\/	TOKEN_DIV	294
\%	TOKEN_MOD	295
\+	TOKEN_PLUS	296
\-	TOKEN_MINUS	297
\,	TOKEN_COMMA	298
\>	TOKEN_GREATER	299
\<	TOKEN_LESS	300
\=	TOKEN_ASSIGN	301
\:	TOKEN_COLON	302
;	TOKEN_SEMI	303
[ \t\n]	(no token )	(no value)
.	TOKEN_ERROR	304
(no regex)	TOKEN_NO_ELSE	305
